const n=JSON.parse('{"key":"v-35f73e58","path":"/java-features/Java17/jep406-pattern-matching-for-switch-preview.html","title":"Java 17 新特性：switch的模式匹配（Preview）","lang":"zh-CN","frontmatter":{"title":"Java 17 新特性：switch的模式匹配（Preview）","description":"Java 17 新特性：switch的模式匹配（Preview） 当case标签可以有模式时，有如下四个主要的设计问题，我们一一来看： 增强类型检查 switch表达式和语句的完整性 模式变量声明的作用域 处理null 模式匹配设计 增强类型检查 扩展switch模式匹配的case标签，支持除了常量之外的模式，如下所示： record Point(int i, int j) {} enum Color { RED, GREEN, BLUE; } static void typeTester(Object o) { switch (o) { case null -&gt; System.out.println(\\"null\\"); case String s -&gt; System.out.println(\\"String\\"); case Color c -&gt; System.out.println(\\"Enum，颜色具有 \\" + Color.values().length + \\" 个值\\"); case Point p -&gt; System.out.println(\\"Record Class: \\" + p.toString()); case int[] ia -&gt; System.out.println(\\"Array，长度为\\" + ia.length); default -&gt; System.out.println(\\"其他情况\\"); } }","author":"会敲代码的程序猿","isOriginal":true,"date":"2023-12-30T00:00:00.000Z","category":"Java","tag":["Java","Java 17"],"order":406,"head":[["meta",{"property":"og:url","content":"https://www.geekyspace.cn/java-features/Java17/jep406-pattern-matching-for-switch-preview.html"}],["meta",{"property":"og:site_name","content":"极客空间"}],["meta",{"property":"og:title","content":"Java 17 新特性：switch的模式匹配（Preview）"}],["meta",{"property":"og:description","content":"Java 17 新特性：switch的模式匹配（Preview） 当case标签可以有模式时，有如下四个主要的设计问题，我们一一来看： 增强类型检查 switch表达式和语句的完整性 模式变量声明的作用域 处理null 模式匹配设计 增强类型检查 扩展switch模式匹配的case标签，支持除了常量之外的模式，如下所示： record Point(int i, int j) {} enum Color { RED, GREEN, BLUE; } static void typeTester(Object o) { switch (o) { case null -&gt; System.out.println(\\"null\\"); case String s -&gt; System.out.println(\\"String\\"); case Color c -&gt; System.out.println(\\"Enum，颜色具有 \\" + Color.values().length + \\" 个值\\"); case Point p -&gt; System.out.println(\\"Record Class: \\" + p.toString()); case int[] ia -&gt; System.out.println(\\"Array，长度为\\" + ia.length); default -&gt; System.out.println(\\"其他情况\\"); } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-20T08:25:41.000Z"}],["meta",{"property":"article:author","content":"会敲代码的程序猿"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Java 17"}],["meta",{"property":"article:published_time","content":"2023-12-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-20T08:25:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 17 新特性：switch的模式匹配（Preview）\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-12-30T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-20T08:25:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"会敲代码的程序猿\\"}]}"]]},"headers":[{"level":2,"title":"模式匹配设计","slug":"模式匹配设计","link":"#模式匹配设计","children":[{"level":3,"title":"增强类型检查","slug":"增强类型检查","link":"#增强类型检查","children":[]},{"level":3,"title":"switch表达式和语句的完整性","slug":"switch表达式和语句的完整性","link":"#switch表达式和语句的完整性","children":[]},{"level":3,"title":"模式变量声明的作用域","slug":"模式变量声明的作用域","link":"#模式变量声明的作用域","children":[]},{"level":3,"title":"处理null","slug":"处理null","link":"#处理null","children":[]}]},{"level":2,"title":"引入了守卫模式和括号模式","slug":"引入了守卫模式和括号模式","link":"#引入了守卫模式和括号模式","children":[]}],"git":{"createdTime":1704047673000,"updatedTime":1705739141000,"contributors":[{"name":"zhouyu","email":"zhouyu@liquido.cn","commits":2}]},"readingTime":{"minutes":3.58,"words":1073},"filePathRelative":"java-features/Java17/jep406-pattern-matching-for-switch-preview.md","localizedDate":"2023年12月30日","excerpt":"<h1> Java 17 新特性：switch的模式匹配（Preview）</h1>\\n<p>当case标签可以有模式时，有如下四个主要的设计问题，我们一一来看：</p>\\n<ol>\\n<li>增强类型检查</li>\\n<li>switch表达式和语句的完整性</li>\\n<li>模式变量声明的作用域</li>\\n<li>处理null</li>\\n</ol>\\n<h2> 模式匹配设计</h2>\\n<h3> 增强类型检查</h3>\\n<p>扩展<code>switch</code>模式匹配的<code>case</code>标签，支持除了常量之外的模式，如下所示：</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">record</span> <span class=\\"token class-name\\">Point</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> j<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">enum</span> <span class=\\"token class-name\\">Color</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token constant\\">RED</span><span class=\\"token punctuation\\">,</span> <span class=\\"token constant\\">GREEN</span><span class=\\"token punctuation\\">,</span> <span class=\\"token constant\\">BLUE</span><span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">typeTester</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Object</span> o<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">switch</span> <span class=\\"token punctuation\\">(</span>o<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">case</span> <span class=\\"token keyword\\">null</span>     <span class=\\"token operator\\">-&gt;</span> <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"null\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">case</span> <span class=\\"token class-name\\">String</span> s <span class=\\"token operator\\">-&gt;</span> <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"String\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">case</span> <span class=\\"token class-name\\">Color</span> c  <span class=\\"token operator\\">-&gt;</span> <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Enum，颜色具有 \\"</span> <span class=\\"token operator\\">+</span> <span class=\\"token class-name\\">Color</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">values</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\" 个值\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">case</span> <span class=\\"token class-name\\">Point</span> p  <span class=\\"token operator\\">-&gt;</span> <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Record Class: \\"</span> <span class=\\"token operator\\">+</span> p<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toString</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">case</span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> ia <span class=\\"token operator\\">-&gt;</span> <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Array，长度为\\"</span> <span class=\\"token operator\\">+</span> ia<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">default</span>       <span class=\\"token operator\\">-&gt;</span> <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"其他情况\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"会敲代码的程序猿"},"autoDesc":true}');export{n as data};
