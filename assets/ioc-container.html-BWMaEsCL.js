import{_ as a,r as c,o as i,c as p,a as e,b as t,d as n,e as r}from"./app-Bhn_JODx.js";const l={},s=r('<h1 id="ioc-容器" tabindex="-1"><a class="header-anchor" href="#ioc-容器"><span>IoC 容器</span></a></h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><blockquote><p><code>org.springframework.context.ApplicationContext</code> 接口代表了<strong>Spring IoC</strong>容器，负责实例化、配置和组装<code>Bean</code></p></blockquote><p>容器通过读取<mark>配置元数据</mark>来获取指令，从而确定要实例化、配置和组装哪些对象。 配置元数据可以用 <code>XML</code>、<code>Java注解</code>或<code>Java代码</code>表示， 用于描述应用程序中的对象及它们之间的复杂相互依赖关系。</p><h2 id="实现类" tabindex="-1"><a class="header-anchor" href="#实现类"><span>实现类</span></a></h2><p>Spring 提供了多个 <code>ApplicationContext</code> 接口的实现类</p>',6),d={href:"https://docs.spring.io/spring-framework/docs/6.1.5/javadoc-api/org/springframework/context/support/ClassPathXmlApplicationContext.html",target:"_blank",rel:"noopener noreferrer"},g={href:"https://docs.spring.io/spring-framework/docs/6.1.5/javadoc-api/org/springframework/context/support/FileSystemXmlApplicationContext.html",target:"_blank",rel:"noopener noreferrer"},m=r('<p>虽然 <code>XML</code> 一直是定义<mark>配置元数据</mark>的传统格式， 但通过提供少量的 <code>XML</code> 配置，您可以声明性地启用对<code>Java注解</code>或<code>Java代码</code> 作为元数据格式的支持，从而更灵活地定义应用程序的配置信息。</p><h2 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化"><span>初始化</span></a></h2><p>在大多数应用场景中，无需手动编写代码来实例化<strong>Spring IoC</strong>容器</p>',3),h=e("code",null,"web.xml",-1),u={href:"https://docs.spring.io/spring-framework/reference/core/beans/context-introduction.html#context-create",target:"_blank",rel:"noopener noreferrer"},k=e("code",null,"ApplicationContext",-1),_=e("p",null,[t("下图表展示了Spring框架的工作原理高层视图。通过将您的"),e("mark",null,"应用程序类"),t("与"),e("mark",null,"配置元数据"),t("结合起来， 一旦"),e("code",null,"ApplicationContext"),t("被创建和初始化，您就获得了一个完全配置且可执行的系统或应用程序。")],-1),f=e("figure",null,[e("img",{src:"http://img.geekyspace.cn/pictures/2024/202403181756387.png",alt:"container magic",tabindex:"0",loading:"lazy"}),e("figcaption",null,"container magic")],-1);function x(C,y){const o=c("ExternalLinkIcon");return i(),p("div",null,[s,e("ul",null,[e("li",null,[e("a",d,[t("ClassPathXmlApplicationContext"),n(o)])]),e("li",null,[e("a",g,[t("FileSystemXmlApplicationContext"),n(o)])])]),m,e("ul",null,[e("li",null,[t("例如：Web应用中，只需要在"),h,t("中添加 8 行"),e("a",u,[t("模板XML"),n(o)]),t(" 即可初始化"),k])]),_,f])}const v=a(l,[["render",x],["__file","ioc-container.html.vue"]]),w=JSON.parse('{"path":"/spring-framework/core/ioc-container.html","title":"IoC 容器","lang":"zh-CN","frontmatter":{"title":"IoC 容器","icon":"spring","author":"会敲代码的程序猿","isOriginal":true,"date":"2024-03-18T00:00:00.000Z","category":"Spring","tag":["Spring","Spring Framework"],"description":"IoC 容器 概述 org.springframework.context.ApplicationContext 接口代表了Spring IoC容器，负责实例化、配置和组装Bean 容器通过读取配置元数据来获取指令，从而确定要实例化、配置和组装哪些对象。 配置元数据可以用 XML、Java注解或Java代码表示， 用于描述应用程序中的对象及它们之间的复...","head":[["meta",{"property":"og:url","content":"https://www.geekyspace.cn/spring-framework/core/ioc-container.html"}],["meta",{"property":"og:site_name","content":"极客空间"}],["meta",{"property":"og:title","content":"IoC 容器"}],["meta",{"property":"og:description","content":"IoC 容器 概述 org.springframework.context.ApplicationContext 接口代表了Spring IoC容器，负责实例化、配置和组装Bean 容器通过读取配置元数据来获取指令，从而确定要实例化、配置和组装哪些对象。 配置元数据可以用 XML、Java注解或Java代码表示， 用于描述应用程序中的对象及它们之间的复..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://img.geekyspace.cn/pictures/2024/202403181756387.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-19T05:06:56.000Z"}],["meta",{"property":"article:author","content":"会敲代码的程序猿"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"Spring Framework"}],["meta",{"property":"article:published_time","content":"2024-03-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-19T05:06:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"IoC 容器\\",\\"image\\":[\\"http://img.geekyspace.cn/pictures/2024/202403181756387.png\\"],\\"datePublished\\":\\"2024-03-18T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-19T05:06:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"会敲代码的程序猿\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"实现类","slug":"实现类","link":"#实现类","children":[]},{"level":2,"title":"初始化","slug":"初始化","link":"#初始化","children":[]}],"git":{"createdTime":1710814902000,"updatedTime":1710824816000,"contributors":[{"name":"zhouyu","email":"zhouyu@liquido.cn","commits":5}]},"readingTime":{"minutes":1.21,"words":363},"filePathRelative":"spring-framework/core/ioc-container.md","localizedDate":"2024年3月18日","excerpt":"\\n<h2>概述</h2>\\n<blockquote>\\n<p><code>org.springframework.context.ApplicationContext</code> 接口代表了<strong>Spring IoC</strong>容器，负责实例化、配置和组装<code>Bean</code></p>\\n</blockquote>\\n<p>容器通过读取<mark>配置元数据</mark>来获取指令，从而确定要实例化、配置和组装哪些对象。\\n配置元数据可以用 <code>XML</code>、<code>Java注解</code>或<code>Java代码</code>表示， 用于描述应用程序中的对象及它们之间的复杂相互依赖关系。</p>","copyright":{"author":"会敲代码的程序猿"},"autoDesc":true}');export{v as comp,w as data};
