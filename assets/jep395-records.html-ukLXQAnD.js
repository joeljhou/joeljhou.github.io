const e=JSON.parse('{"key":"v-5f4e29a2","path":"/java-features/Java16/jep395-records.html","title":"Java 16 新特性：record类","lang":"zh-CN","frontmatter":{"title":"Java 16 新特性：record类","description":"Java 16 新特性：record类 Java 16引入的record类是一种用于简化不可变数据管理的特殊类。 它通过紧凑的语法提供了对不可变数据的支持，并自动生成常见的方法， 如equals()、hashCode()和toString()等，从而减少了开发者的样板代码。 传统Java Bean问题 在处理不可变数据时，传统的Java Bean存在“繁琐”和“冗长”的问题。 为了管理少量值的不可变数据，开发者需要编写大量低价值、重复且容易出错的代码， 包括构造函数、访问器(getter/setter)、equals、hashCode、toString等。","author":"会敲代码的程序猿","isOriginal":true,"date":"2023-12-29T00:00:00.000Z","category":"Java","tag":["Java","Java 16"],"order":395,"head":[["meta",{"property":"og:url","content":"https://joeljhou.github.io/joeljhou/joeljhou/java-features/Java16/jep395-records.html"}],["meta",{"property":"og:site_name","content":"会敲代码的程序猿"}],["meta",{"property":"og:title","content":"Java 16 新特性：record类"}],["meta",{"property":"og:description","content":"Java 16 新特性：record类 Java 16引入的record类是一种用于简化不可变数据管理的特殊类。 它通过紧凑的语法提供了对不可变数据的支持，并自动生成常见的方法， 如equals()、hashCode()和toString()等，从而减少了开发者的样板代码。 传统Java Bean问题 在处理不可变数据时，传统的Java Bean存在“繁琐”和“冗长”的问题。 为了管理少量值的不可变数据，开发者需要编写大量低价值、重复且容易出错的代码， 包括构造函数、访问器(getter/setter)、equals、hashCode、toString等。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-31T08:21:25.000Z"}],["meta",{"property":"article:author","content":"会敲代码的程序猿"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Java 16"}],["meta",{"property":"article:published_time","content":"2023-12-29T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-31T08:21:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 16 新特性：record类\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-12-29T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-31T08:21:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"会敲代码的程序猿\\"}]}"]]},"headers":[{"level":2,"title":"传统Java Bean问题","slug":"传统java-bean问题","link":"#传统java-bean问题","children":[]},{"level":2,"title":"引入record类","slug":"引入record类","link":"#引入record类","children":[]},{"level":2,"title":"显示声明紧凑构造函数","slug":"显示声明紧凑构造函数","link":"#显示声明紧凑构造函数","children":[]},{"level":2,"title":"发展脉络","slug":"发展脉络","link":"#发展脉络","children":[]}],"git":{"createdTime":1703845319000,"updatedTime":1704010885000,"contributors":[{"name":"zhouyu","email":"zhouyu@liquido.cn","commits":2}]},"readingTime":{"minutes":3.83,"words":1150},"filePathRelative":"java-features/Java16/jep395-records.md","localizedDate":"2023年12月29日","excerpt":"<h1> Java 16 新特性：record类</h1>\\n<p>Java 16引入的<code>record</code>类是一种用于简化不可变数据管理的特殊类。\\n它通过紧凑的语法提供了对不可变数据的支持，并自动生成常见的方法，\\n如<code>equals()</code>、<code>hashCode()</code>和<code>toString()</code>等，从而减少了开发者的样板代码。</p>\\n<h2> 传统Java Bean问题</h2>\\n<p>在处理不可变数据时，传统的Java Bean存在“<mark>繁琐</mark>”和“<mark>冗长</mark>”的问题。\\n为了管理少量值的不可变数据，开发者需要编写大量低价值、重复且容易出错的代码，\\n包括<code>构造函数</code>、<code>访问器(getter/setter)</code>、<code>equals</code>、<code>hashCode</code>、<code>toString</code>等。</p>","copyright":{"author":"JoelJhou","license":"MIT"},"autoDesc":true}');export{e as data};
