const e=JSON.parse('{"key":"v-35f73e58","path":"/java-features/Java17/jep406-pattern-matching-for-switch-preview.html","title":"Java 17 新特性：switch模式匹配（Preview）","lang":"zh-CN","frontmatter":{"title":"Java 17 新特性：switch模式匹配（Preview）","description":"Java 17 新特性：switch模式匹配（Preview） 当case标签可以有模式时，有如下四个主要的设计问题，我们一一来看： 增强类型检查 switch表达式和语句的完整性 模式变量声明的作用域 处理null 模式匹配设计 增强类型检查 通过扩展switch模式匹配的case标签，现在支持除了原始数据类型（char、byte、short 或 i...","author":"会敲代码的程序猿","isOriginal":true,"date":"2023-12-30T00:00:00.000Z","category":"Java","tag":["Java","Java 17"],"order":406,"head":[["meta",{"property":"og:url","content":"https://www.geekyspace.cn/java-features/Java17/jep406-pattern-matching-for-switch-preview.html"}],["meta",{"property":"og:site_name","content":"极客空间"}],["meta",{"property":"og:title","content":"Java 17 新特性：switch模式匹配（Preview）"}],["meta",{"property":"og:description","content":"Java 17 新特性：switch模式匹配（Preview） 当case标签可以有模式时，有如下四个主要的设计问题，我们一一来看： 增强类型检查 switch表达式和语句的完整性 模式变量声明的作用域 处理null 模式匹配设计 增强类型检查 通过扩展switch模式匹配的case标签，现在支持除了原始数据类型（char、byte、short 或 i..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-27T03:54:23.000Z"}],["meta",{"property":"article:author","content":"会敲代码的程序猿"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Java 17"}],["meta",{"property":"article:published_time","content":"2023-12-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-27T03:54:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 17 新特性：switch模式匹配（Preview）\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-12-30T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-27T03:54:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"会敲代码的程序猿\\"}]}"]]},"headers":[{"level":2,"title":"模式匹配设计","slug":"模式匹配设计","link":"#模式匹配设计","children":[{"level":3,"title":"增强类型检查","slug":"增强类型检查","link":"#增强类型检查","children":[]},{"level":3,"title":"switch表达式和语句的完整性","slug":"switch表达式和语句的完整性","link":"#switch表达式和语句的完整性","children":[]},{"level":3,"title":"模式变量声明的作用域","slug":"模式变量声明的作用域","link":"#模式变量声明的作用域","children":[]},{"level":3,"title":"处理null","slug":"处理null","link":"#处理null","children":[]}]},{"level":2,"title":"保护模式和括号模式","slug":"保护模式和括号模式","link":"#保护模式和括号模式","children":[]}],"git":{"createdTime":1704047673000,"updatedTime":1709006063000,"contributors":[{"name":"zhouyu","email":"zhouyu@liquido.cn","commits":4},{"name":"joeljhou","email":"joeljhou336@gmail.com","commits":1}]},"readingTime":{"minutes":3.93,"words":1180},"filePathRelative":"java-features/Java17/jep406-pattern-matching-for-switch-preview.md","localizedDate":"2023年12月30日","excerpt":"\\n<p>当case标签可以有模式时，有如下四个主要的设计问题，我们一一来看：</p>\\n<ol>\\n<li>增强类型检查</li>\\n<li>switch表达式和语句的完整性</li>\\n<li>模式变量声明的作用域</li>\\n<li>处理null</li>\\n</ol>\\n<h2>模式匹配设计</h2>\\n<h3>增强类型检查</h3>\\n<p>通过扩展<code>switch</code>模式匹配的<code>case</code>标签，现在支持除了<strong>原始数据类型</strong>（<code>char</code>、<code>byte</code>、<code>short</code> 或 <code>int</code>）之外，\\n相应的<strong>包装类</strong>（<code>Character</code>、<code>Byte</code>、<code>Short</code> 或 <code>Integer</code>）、<code>String</code> 以及<code>Enum</code>类型等<strong>任何引用类型</strong>。</p>","copyright":{"author":"会敲代码的程序猿"},"autoDesc":true}');export{e as data};
