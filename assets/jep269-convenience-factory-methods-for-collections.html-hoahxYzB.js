const a=JSON.parse('{"key":"v-890c045e","path":"/java-features/Java9/jep269-convenience-factory-methods-for-collections.html","title":"Java 9 新特性：不可变集合的快捷创建方法","lang":"zh-CN","frontmatter":{"title":"Java 9 新特性：不可变集合的快捷创建方法","description":"Java 9引入了一项令人期待的新特性，即“Convenience Factory Methods for Collections”（集合的便利工厂方法），旨在使不可变集合的创建更加简单和便捷。 在此之前，我们通常使用构造方法来初始化集合，而Java 9为我们提供了一些全新的静态工厂方法，使得创建不可变集合的过程更为优雅。 Java 9的集合创建方式 Java 9引入了一些便利的工厂方法，使得创建和初始化集合对象变得更加简洁和方便。 这些改进包括List.of()、Set.of()和Map.of()等方法，用于创建不可变的集合对象。 // 创建不可变列表 List&lt;String&gt; immutableList = List.of(\\"item1\\", \\"item2\\", \\"item3\\"); // 创建不可变集合 Set&lt;String&gt; immutableSet = Set.of(\\"item1\\", \\"item2\\", \\"item3\\"); // 创建不可变映射 Map&lt;String, Integer&gt; immutableMap = Map.of(\\"a\\", 1, \\"b\\", 2, \\"c\\", 3);","author":"会敲代码的程序猿","isOriginal":true,"date":"2023-12-25T00:00:00.000Z","category":"Java","tag":"Java","order":266,"head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/joeljhou/java-features/Java9/jep269-convenience-factory-methods-for-collections.html"}],["meta",{"property":"og:site_name","content":"会敲代码的程序猿"}],["meta",{"property":"og:title","content":"Java 9 新特性：不可变集合的快捷创建方法"}],["meta",{"property":"og:description","content":"Java 9引入了一项令人期待的新特性，即“Convenience Factory Methods for Collections”（集合的便利工厂方法），旨在使不可变集合的创建更加简单和便捷。 在此之前，我们通常使用构造方法来初始化集合，而Java 9为我们提供了一些全新的静态工厂方法，使得创建不可变集合的过程更为优雅。 Java 9的集合创建方式 Java 9引入了一些便利的工厂方法，使得创建和初始化集合对象变得更加简洁和方便。 这些改进包括List.of()、Set.of()和Map.of()等方法，用于创建不可变的集合对象。 // 创建不可变列表 List&lt;String&gt; immutableList = List.of(\\"item1\\", \\"item2\\", \\"item3\\"); // 创建不可变集合 Set&lt;String&gt; immutableSet = Set.of(\\"item1\\", \\"item2\\", \\"item3\\"); // 创建不可变映射 Map&lt;String, Integer&gt; immutableMap = Map.of(\\"a\\", 1, \\"b\\", 2, \\"c\\", 3);"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-25T10:49:41.000Z"}],["meta",{"property":"article:author","content":"会敲代码的程序猿"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2023-12-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-25T10:49:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 9 新特性：不可变集合的快捷创建方法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-12-25T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-25T10:49:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"会敲代码的程序猿\\"}]}"]]},"headers":[{"level":2,"title":"Java 9的集合创建方式","slug":"java-9的集合创建方式","link":"#java-9的集合创建方式","children":[]},{"level":2,"title":"Java 8的集合创建方式","slug":"java-8的集合创建方式","link":"#java-8的集合创建方式","children":[]},{"level":2,"title":"传统的集合创建方式","slug":"传统的集合创建方式","link":"#传统的集合创建方式","children":[]},{"level":2,"title":"与asList的区别","slug":"与aslist的区别","link":"#与aslist的区别","children":[]}],"git":{"createdTime":1703058579000,"updatedTime":1703501381000,"contributors":[{"name":"zhouyu","email":"zhouyu@liquido.cn","commits":3}]},"readingTime":{"minutes":2.57,"words":771},"filePathRelative":"java-features/Java9/jep269-convenience-factory-methods-for-collections.md","localizedDate":"2023年12月25日","excerpt":"<p>Java 9引入了一项令人期待的新特性，即“Convenience Factory Methods for Collections”（集合的便利工厂方法），旨在使不可变集合的创建更加简单和便捷。\\n在此之前，我们通常使用构造方法来初始化集合，而Java 9为我们提供了一些全新的静态工厂方法，使得创建不可变集合的过程更为优雅。</p>\\n<h2> Java 9的集合创建方式</h2>\\n<p>Java 9引入了一些便利的工厂方法，使得创建和初始化集合对象变得更加简洁和方便。\\n这些改进包括List.of()、Set.of()和Map.of()等方法，用于创建不可变的集合对象。</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token comment\\">// 创建不可变列表</span>\\n<span class=\\"token class-name\\">List</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">&gt;</span></span> immutableList <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">List</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">of</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"item1\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"item2\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"item3\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 创建不可变集合</span>\\n<span class=\\"token class-name\\">Set</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">&gt;</span></span> immutableSet <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Set</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">of</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"item1\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"item2\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"item3\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 创建不可变映射</span>\\n<span class=\\"token class-name\\">Map</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">&gt;</span></span> immutableMap <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Map</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">of</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"a\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"b\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"c\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"JoelJhou","license":"MIT"},"autoDesc":true}');export{a as data};
