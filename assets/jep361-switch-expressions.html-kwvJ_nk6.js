const e=JSON.parse('{"key":"v-52f7d68d","path":"/java-features/Java14/jep361-switch-expressions.html","title":"Java 14 新特性：switch表达式增强","lang":"zh-CN","frontmatter":{"title":"Java 14 新特性：switch表达式增强","description":"Java 14 新特性：switch表达式增强 Java 14（JEP 361）引入了 switch 表达式的新特性，其中包括了 \\"箭头标签（case ... -&gt;）\\" 和 yield 语句的增强， 同时支持 Lambda 语法，使得代码更加灵活、简洁，并为未来的模式匹配（JEP 305）特性做好了准备。 传统的switch语句 首先，让我们回顾一下传统的switch语句，它们在处理多个条件时可能显得有些冗长：","author":"会敲代码的程序猿","isOriginal":true,"date":"2023-12-25T00:00:00.000Z","category":"Java","tag":["Java","Java 14"],"order":361,"head":[["meta",{"property":"og:url","content":"https://joeljhou.github.io/joeljhou/joeljhou/java-features/Java14/jep361-switch-expressions.html"}],["meta",{"property":"og:site_name","content":"会敲代码的程序猿"}],["meta",{"property":"og:title","content":"Java 14 新特性：switch表达式增强"}],["meta",{"property":"og:description","content":"Java 14 新特性：switch表达式增强 Java 14（JEP 361）引入了 switch 表达式的新特性，其中包括了 \\"箭头标签（case ... -&gt;）\\" 和 yield 语句的增强， 同时支持 Lambda 语法，使得代码更加灵活、简洁，并为未来的模式匹配（JEP 305）特性做好了准备。 传统的switch语句 首先，让我们回顾一下传统的switch语句，它们在处理多个条件时可能显得有些冗长："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-28T10:37:12.000Z"}],["meta",{"property":"article:author","content":"会敲代码的程序猿"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Java 14"}],["meta",{"property":"article:published_time","content":"2023-12-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-28T10:37:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 14 新特性：switch表达式增强\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-12-25T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-28T10:37:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"会敲代码的程序猿\\"}]}"]]},"headers":[{"level":2,"title":"传统的switch语句","slug":"传统的switch语句","link":"#传统的switch语句","children":[]},{"level":2,"title":"switch表达式增强","slug":"switch表达式增强","link":"#switch表达式增强","children":[{"level":3,"title":"箭头标签（case L ->）","slug":"箭头标签-case-l","link":"#箭头标签-case-l","children":[]},{"level":3,"title":"局部变量独立作用域","slug":"局部变量独立作用域","link":"#局部变量独立作用域","children":[]},{"level":3,"title":"switch表达式","slug":"switch表达式","link":"#switch表达式","children":[]},{"level":3,"title":"yield语句返回值","slug":"yield语句返回值","link":"#yield语句返回值","children":[]}]},{"level":2,"title":"发展脉络","slug":"发展脉络","link":"#发展脉络","children":[]}],"git":{"createdTime":1703668892000,"updatedTime":1703759832000,"contributors":[{"name":"zhouyu","email":"zhouyu@liquido.cn","commits":3}]},"readingTime":{"minutes":2.46,"words":738},"filePathRelative":"java-features/Java14/jep361-switch-expressions.md","localizedDate":"2023年12月25日","excerpt":"<h1> Java 14 新特性：switch表达式增强</h1>\\n<p>Java 14（JEP 361）引入了 switch 表达式的新特性，其中包括了 \\"箭头标签（<code>case ... -&gt;</code>）\\" 和 <code>yield</code> 语句的增强，\\n同时支持 <code>Lambda</code> 语法，使得代码更加灵活、简洁，并为未来的<strong>模式匹配</strong>（JEP 305）特性做好了准备。</p>\\n<h2> 传统的switch语句</h2>\\n<p>首先，让我们回顾一下传统的switch语句，它们在处理多个条件时可能显得有些冗长：</p>","copyright":{"author":"JoelJhou","license":"MIT"},"autoDesc":true}');export{e as data};
