import{_ as r,r as a,o as i,c as l,a as e,b as t,d as n,e as c}from"./app-z52q2Mhn.js";const p={},s=c('<h1 id="ioc-容器" tabindex="-1"><a class="header-anchor" href="#ioc-容器"><span>Ioc 容器</span></a></h1><h2 id="容器概述" tabindex="-1"><a class="header-anchor" href="#容器概述"><span>容器概述</span></a></h2><blockquote><p><code>org.springframework.context.ApplicationContext</code> 接口代表了 <strong>Spring IoC</strong> 容器，负责实例化、配置和组装 bean。</p></blockquote><ul><li>容器通过读取配置<mark>元数据</mark>来获取指令，从而确定要实例化、配置和组装哪些对象。</li><li>配置元数据可以用 XML、Java 注解或 Java 代码表示，它允许您表达组成应用程序的对象以及这些对象之间的丰富相互依赖关系。</li></ul><h3 id="容器实现" tabindex="-1"><a class="header-anchor" href="#容器实现"><span>容器实现</span></a></h3>',5),g=e("p",null,[t("Spring 提供了多个实现了 "),e("code",null,"ApplicationContext"),t(" 接口的实现类。")],-1),d={href:"https://docs.spring.io/spring-framework/docs/6.1.5/javadoc-api/org/springframework/context/support/ClassPathXmlApplicationContext.html",target:"_blank",rel:"noopener noreferrer"},h={href:"https://docs.spring.io/spring-framework/docs/6.1.5/javadoc-api/org/springframework/context/support/FileSystemXmlApplicationContext.html",target:"_blank",rel:"noopener noreferrer"},m=e("li",null,[e("p",null,"虽然 XML 一直是定义配置元数据的传统格式，但您可以通过提供少量的 XML 配置来声明性地启用对这些附加元数据格式的支持， 从而指示容器使用 Java 注解或代码作为元数据格式。")],-1),u=e("h3",{id:"容器初始化简化",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#容器初始化简化"},[e("span",null,"容器初始化简化")])],-1),_=e("li",null,"在大多数应用场景中，通常不需要用户编写显式代码来实例化一个或多个 Spring IoC 容器的实例。",-1),f=e("code",null,"web.xml",-1),k={href:"https://docs.spring.io/spring-framework/reference/core/beans/context-introduction.html#context-create",target:"_blank",rel:"noopener noreferrer"},x={href:"https://spring.io/tools",target:"_blank",rel:"noopener noreferrer"},y=e("p",null,"以下图表展示了 Spring 工作的高层视图。 您的应用程序类与配置元数据结合在一起，因此，在创建和初始化 ApplicationContext 之后，您就拥有了一个完全配置和可执行的系统或应用程序。",-1),b=e("figure",null,[e("img",{src:"http://img.geekyspace.cn/pictures/2024/202403181756387.png",alt:"container magic",tabindex:"0",loading:"lazy"}),e("figcaption",null,"container magic")],-1),C=e("h2",{id:"配置元数据",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#配置元数据"},[e("span",null,"配置元数据")])],-1);function v(w,S){const o=a("ExternalLinkIcon");return i(),l("div",null,[s,e("ul",null,[e("li",null,[g,e("ul",null,[e("li",null,[e("a",d,[t("ClassPathXmlApplicationContext"),n(o)])]),e("li",null,[e("a",h,[t("FileSystemXmlApplicationContext"),n(o)])])])]),m]),u,e("ul",null,[_,e("li",null,[t("在 Web 应用程序场景中，通常只需要在应用程序的 "),f,t(" 文件中添加简单的八行左右的模板式 Web 描述符 XML 就足够了 （请参阅方便的 "),e("a",k,[t("Web 应用程序中的 ApplicationContext 实例化"),n(o)]),t("）。")]),e("li",null,[t("如果您使用 "),e("a",x,[t("Spring Tools for Eclipse"),n(o)]),t("，您可以轻松地通过几次鼠标点击或按键来创建这个模板配置。")])]),y,b,C])}const A=r(p,[["render",v],["__file","ioc-container.html.vue"]]),T=JSON.parse('{"path":"/spring-framework/core/ioc-container.html","title":"Ioc 容器","lang":"zh-CN","frontmatter":{"title":"Ioc 容器","icon":"spring","author":"会敲代码的程序猿","isOriginal":true,"date":"2024-03-18T00:00:00.000Z","category":"Spring","tag":["Spring","Spring Framework"],"description":"Ioc 容器 容器概述 org.springframework.context.ApplicationContext 接口代表了 Spring IoC 容器，负责实例化、配置和组装 bean。 容器通过读取配置元数据来获取指令，从而确定要实例化、配置和组装哪些对象。 配置元数据可以用 XML、Java 注解或 Java 代码表示，它允许您表达组成应用程...","head":[["meta",{"property":"og:url","content":"https://www.geekyspace.cn/spring-framework/core/ioc-container.html"}],["meta",{"property":"og:site_name","content":"极客空间"}],["meta",{"property":"og:title","content":"Ioc 容器"}],["meta",{"property":"og:description","content":"Ioc 容器 容器概述 org.springframework.context.ApplicationContext 接口代表了 Spring IoC 容器，负责实例化、配置和组装 bean。 容器通过读取配置元数据来获取指令，从而确定要实例化、配置和组装哪些对象。 配置元数据可以用 XML、Java 注解或 Java 代码表示，它允许您表达组成应用程..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://img.geekyspace.cn/pictures/2024/202403181756387.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-19T03:07:03.000Z"}],["meta",{"property":"article:author","content":"会敲代码的程序猿"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"Spring Framework"}],["meta",{"property":"article:published_time","content":"2024-03-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-19T03:07:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Ioc 容器\\",\\"image\\":[\\"http://img.geekyspace.cn/pictures/2024/202403181756387.png\\"],\\"datePublished\\":\\"2024-03-18T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-19T03:07:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"会敲代码的程序猿\\"}]}"]]},"headers":[{"level":2,"title":"容器概述","slug":"容器概述","link":"#容器概述","children":[{"level":3,"title":"容器实现","slug":"容器实现","link":"#容器实现","children":[]},{"level":3,"title":"容器初始化简化","slug":"容器初始化简化","link":"#容器初始化简化","children":[]}]},{"level":2,"title":"配置元数据","slug":"配置元数据","link":"#配置元数据","children":[]}],"git":{"createdTime":1710814902000,"updatedTime":1710817623000,"contributors":[{"name":"zhouyu","email":"zhouyu@liquido.cn","commits":3}]},"readingTime":{"minutes":1.56,"words":469},"filePathRelative":"spring-framework/core/ioc-container.md","localizedDate":"2024年3月18日","excerpt":"\\n<h2>容器概述</h2>\\n<blockquote>\\n<p><code>org.springframework.context.ApplicationContext</code> 接口代表了 <strong>Spring IoC</strong> 容器，负责实例化、配置和组装 bean。</p>\\n</blockquote>\\n<ul>\\n<li>容器通过读取配置<mark>元数据</mark>来获取指令，从而确定要实例化、配置和组装哪些对象。</li>\\n<li>配置元数据可以用 XML、Java 注解或 Java 代码表示，它允许您表达组成应用程序的对象以及这些对象之间的丰富相互依赖关系。</li>\\n</ul>","copyright":{"author":"会敲代码的程序猿"},"autoDesc":true}');export{A as comp,T as data};
