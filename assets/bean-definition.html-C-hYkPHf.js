import{_ as o,r as p,o as c,c as l,a,b as n,d as e,e as s}from"./app-BuMw2P-Y.js";const r={},i=s('<h1 id="bean-定义" tabindex="-1"><a class="header-anchor" href="#bean-定义"><span>Bean 定义</span></a></h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><blockquote><p>构建应用程序主干并由Spring IoC 容器管理的对象称为 Bean。</p><p>在容器中，Bean的定义表示为<code>org.springframework.beans.factory.config.BeanDefinition</code>对象。</p></blockquote><p><strong>BeanDefinition包含以下元数据：</strong></p><ul><li><strong>全路径类名</strong>：通常，被定义为Bean的实现类</li><li><strong>行为配置元素</strong>：说明了Bean在容器中的行为方式，例如作用域scope、生命周期回调等</li><li><strong>依赖关系</strong>：描述Bean与其他Bean之间的依赖关系，包括依赖注入，依赖查找等</li><li>其他配置信息：如：管理连接池的Bean可以配置pool的大小限制，使用的连接数量等</li></ul><p>该元数据转换为组成每个bean定义的一组属性。 下表介绍了这些属性：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>Class</td><td>Bean的全限定类名</td></tr><tr><td>Name</td><td>Bean的名称</td></tr><tr><td>Scope</td><td>Bean的作用域</td></tr><tr><td>Constructor arguments</td><td>Bean的构造函数参数</td></tr><tr><td>Properties</td><td>Bean的属性</td></tr><tr><td>Autowiring mode</td><td>Bean的自动装配模式</td></tr><tr><td>Lazy initialization mode</td><td>Bean的延迟初始化模式</td></tr><tr><td>Initialization method</td><td>Bean的初始化方法</td></tr><tr><td>Destruction method</td><td>Bean的销毁方法</td></tr></tbody></table><h2 id="命名beans" tabindex="-1"><a class="header-anchor" href="#命名beans"><span>命名Beans</span></a></h2><p>在Spring IoC容器中，每个Bean都必须有一个<mark>唯一的标识符</mark>（identifier），如果需要一个以上的标识符，多余的标识符可以被视为<mark>别名</mark>。</p><p><strong>基于XML的配置元数据</strong></p><p>可以使用<code>id</code>属性、<code>name</code>属性来指定Bean标识符（默认采取小写字母开头的驼峰命名法）</p><table><thead><tr><th>属性/元素</th><th>描述</th></tr></thead><tbody><tr><td><code>id</code></td><td>Bean的唯一标识符；</td></tr><tr><td><code>name</code></td><td>Bean的别名，可以有多个别名；用逗号（<code>,</code>）、分号（<code>;</code>）或空格分隔</td></tr><tr><td><code>alias</code></td><td>与name作用相同，都是用于指定Bean的别名（Spring 5.0中废弃）</td></tr><tr><td><code>ref</code></td><td>引用其他Bean</td></tr></tbody></table>',12),d=a("code",null,"id",-1),u=a("code",null,"ref",-1),k={href:"https://docs.spring.io/spring-framework/reference/core/beans/dependencies/factory-properties-detailed.html#beans-inner-beans",target:"_blank",rel:"noopener noreferrer"},m={href:"https://docs.spring.io/spring-framework/reference/core/beans/dependencies/factory-autowire.html",target:"_blank",rel:"noopener noreferrer"},g=s("<p><strong>使用Introspector生成默认Bean名称</strong></p><p>在classpath中的组件扫描，Spring会自动为为命名的组件按照<code>java.beans.Introspector</code>的规则生成一个默认的bean名称</p><ul><li>默认将类名的转为<mark>小写字母开头的驼峰命名法</mark>；如<code>com.example.MyBean</code>类的默认bean名称是<code>myBean</code></li><li>特殊的，如果类名的第一个和第二个字符都是大写字母，则 Spring 会保留原始的大小写; 例如：<code>URL</code>类的默认bean名称还是<code>URL</code></li></ul>",3),h=a("strong",null,"Java配置",-1),b=a("code",null,"@Bean",-1),B={href:"https://docs.spring.io/spring-framework/reference/core/beans/java/bean-annotation.html",target:"_blank",rel:"noopener noreferrer"},v=s(`<h2 id="实例化bean" tabindex="-1"><a class="header-anchor" href="#实例化bean"><span>实例化Bean</span></a></h2><blockquote><p><code>Bean</code>定义实际上是创建一个或多个对象的方法。 当容器被询问时，它会查看指定名称的Bean定义，并使用该定义创建（或获取）一个对象。</p></blockquote><h3 id="使用构造函数实例化" tabindex="-1"><a class="header-anchor" href="#使用构造函数实例化"><span>使用构造函数实例化</span></a></h3><p>在XML配置文件中，可以使用<code>&lt;constructor-arg&gt;</code>元素指定构造函数的参数来实例化Bean对象。例如：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.example.MyBean<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>parameterValue<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>java.lang.String<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>anotherBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.example.BeanTwo<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>parameter<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里<code>MyBean</code>类的构造函数接受一个<code>String</code>类型的参数。<code>BeanTwo</code>类的构造函数接受一个引用参数。</p><h3 id="使用静态工厂方法实例化" tabindex="-1"><a class="header-anchor" href="#使用静态工厂方法实例化"><span>使用静态工厂方法实例化</span></a></h3><p>可以使用<code>&lt;bean&gt;</code>元素的<code>factory-method</code>属性指定静态工厂方法来实例化Bean对象。例如：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.example.MyBeanFactory<span class="token punctuation">&quot;</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>createInstance<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>MyBeanFactory</code>类中，有一个名为<code>createInstance</code>的静态工厂方法返回<code>MyBean</code>对象。</p><h3 id="使用实例工厂方法实例化" tabindex="-1"><a class="header-anchor" href="#使用实例工厂方法实例化"><span>使用实例工厂方法实例化</span></a></h3><p>可以使用<code>&lt;bean&gt;</code>元素的<code>factory-bean</code>属性和<code>factory-method</code>属性结合起来使用实例工厂方法来实例化Bean对象。例如：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myBeanFactory<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.example.MyBeanFactory<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myBeanFactory<span class="token punctuation">&quot;</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>createInstance<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>MyBeanFactory</code>类中，有一个非静态的<code>createInstance</code>方法返回MyBean对象。</p><h3 id="确定bean的运行时类型" tabindex="-1"><a class="header-anchor" href="#确定bean的运行时类型"><span>确定Bean的运行时类型</span></a></h3><p>确定特定bean的<mark>运行时类型</mark>并非易事。</p><p>原因如下：</p><ul><li>Bean 元数据定义中指定的类只是一个<strong>初始类引用</strong></li><li>可能与声明的工厂方法结合使用，可能是一个<code>FactoryBean</code>类</li><li>AOP代理可能会使用基于接口代理包装bean实例，目标bean的实际类型公开有限（只有其实现的的代理接口）</li><li>等等</li></ul><p><code>BeanFactory.getType()</code> 方法：该方法可以获取bean的实际运行时类型，并且考虑到了上述所有因素。</p>`,19);function f(q,y){const t=p("ExternalLinkIcon");return c(),l("div",null,[i,a("p",null,[n("建议为每个Bean提供一个唯一的"),d,n("属性，以便使用"),u,n("属性引用该Bean。 不提供名称的动机与使用"),a("a",k,[n("内部Bean"),e(t)]),n(" 和"),a("a",m,[n("自动装配协作者"),e(t)]),n("有关")]),g,a("blockquote",null,[a("p",null,[n("如果你使用"),h,n("，"),b,n(" 注解可以被用来提供别名。 参阅 "),a("a",B,[n("使用@Bean注释"),e(t)]),n("。")])]),v])}const x=o(r,[["render",f],["__file","bean-definition.html.vue"]]),w=JSON.parse('{"path":"/spring-framework/core/bean-definition.html","title":"Bean 定义","lang":"zh-CN","frontmatter":{"title":"Bean 定义","author":"会敲代码的程序猿","isOriginal":true,"date":"2024-03-18T00:00:00.000Z","category":"Spring","tag":["Spring","Spring Framework"],"description":"Bean 定义 概述 构建应用程序主干并由Spring IoC 容器管理的对象称为 Bean。 在容器中，Bean的定义表示为org.springframework.beans.factory.config.BeanDefinition对象。 BeanDefinition包含以下元数据： 全路径类名：通常，被定义为Bean的实现类 行为配置元素：说明了...","head":[["meta",{"property":"og:url","content":"https://www.geekyspace.cn/spring-framework/core/bean-definition.html"}],["meta",{"property":"og:site_name","content":"极客空间"}],["meta",{"property":"og:title","content":"Bean 定义"}],["meta",{"property":"og:description","content":"Bean 定义 概述 构建应用程序主干并由Spring IoC 容器管理的对象称为 Bean。 在容器中，Bean的定义表示为org.springframework.beans.factory.config.BeanDefinition对象。 BeanDefinition包含以下元数据： 全路径类名：通常，被定义为Bean的实现类 行为配置元素：说明了..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-25T10:54:58.000Z"}],["meta",{"property":"article:author","content":"会敲代码的程序猿"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"Spring Framework"}],["meta",{"property":"article:published_time","content":"2024-03-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-25T10:54:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Bean 定义\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-18T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-25T10:54:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"会敲代码的程序猿\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"命名Beans","slug":"命名beans","link":"#命名beans","children":[]},{"level":2,"title":"实例化Bean","slug":"实例化bean","link":"#实例化bean","children":[{"level":3,"title":"使用构造函数实例化","slug":"使用构造函数实例化","link":"#使用构造函数实例化","children":[]},{"level":3,"title":"使用静态工厂方法实例化","slug":"使用静态工厂方法实例化","link":"#使用静态工厂方法实例化","children":[]},{"level":3,"title":"使用实例工厂方法实例化","slug":"使用实例工厂方法实例化","link":"#使用实例工厂方法实例化","children":[]},{"level":3,"title":"确定Bean的运行时类型","slug":"确定bean的运行时类型","link":"#确定bean的运行时类型","children":[]}]}],"git":{"createdTime":1710844105000,"updatedTime":1711364098000,"contributors":[{"name":"zhouyu","email":"zhouyu@liquido.cn","commits":8}]},"readingTime":{"minutes":3.8,"words":1139},"filePathRelative":"spring-framework/core/bean-definition.md","localizedDate":"2024年3月18日","excerpt":"\\n<h2>概述</h2>\\n<blockquote>\\n<p>构建应用程序主干并由Spring IoC 容器管理的对象称为 Bean。</p>\\n<p>在容器中，Bean的定义表示为<code>org.springframework.beans.factory.config.BeanDefinition</code>对象。</p>\\n</blockquote>\\n<p><strong>BeanDefinition包含以下元数据：</strong></p>\\n<ul>\\n<li><strong>全路径类名</strong>：通常，被定义为Bean的实现类</li>\\n<li><strong>行为配置元素</strong>：说明了Bean在容器中的行为方式，例如作用域scope、生命周期回调等</li>\\n<li><strong>依赖关系</strong>：描述Bean与其他Bean之间的依赖关系，包括依赖注入，依赖查找等</li>\\n<li>其他配置信息：如：管理连接池的Bean可以配置pool的大小限制，使用的连接数量等</li>\\n</ul>","copyright":{"author":"会敲代码的程序猿"},"autoDesc":true}');export{x as comp,w as data};
